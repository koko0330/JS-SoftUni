describe ('rgbToHexColor function', () => {
    it ('returns the correct color code', () => {
        expect(rgbToHexColor(1, 2, 3)).to.equal('#010203');
    });

    it ('returns the correct color code', () => {
        expect(rgbToHexColor(100, 62, 67)).to.equal('#643E43');
    });

    it ('returns the correct color code', () => {
        expect(rgbToHexColor(0, 0, 0)).to.equal('#000000');
    });

    it ('returns the correct color code', () => {
        expect(rgbToHexColor(255, 255, 255)).to.equal('#FFFFFF');
    });


    it ('red returns undefined if bellow zero', () => {
        expect(rgbToHexColor(-1, 2, 3)).to.equal(undefined);
    });

    it ('blue returns undefined if bellow zero', () => {
        expect(rgbToHexColor(1, -2, 3)).to.equal(undefined);
    });


    it ('green returns undefined if bellow zero', () => {
        expect(rgbToHexColor(1, 2,-3)).to.equal(undefined);
    });

    it ('red returns undefined if above 255', () => {
        expect(rgbToHexColor(260, 2, 3)).to.equal(undefined);
    });

    it ('blue returns undefined if above 255', () => {
        expect(rgbToHexColor(1, 260, 3)).to.equal(undefined);
    });


    it ('green returns undefined if above 255', () => {
        expect(rgbToHexColor(1, 2, 260)).to.equal(undefined);
    });

    it ('red returns undefined if not integer', () => {
        expect(rgbToHexColor('a', 2, 3)).to.equal(undefined);
    });

    it ('blue returns undefined if not integer', () => {
        expect(rgbToHexColor(1, 'a', 3)).to.equal(undefined);
    });


    it ('green returns undefined if not integer', () => {
        expect(rgbToHexColor(1, 2, 'a')).to.equal(undefined);
    });

})
